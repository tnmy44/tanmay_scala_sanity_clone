package org.main.scla_dep_mgmt_change.graph.expressions_sg
import io.prophecy.libs._
import org.main.scla_dep_mgmt_change.udfs.PipelineInitCode._
import org.main.scla_dep_mgmt_change.udfs.UDFs._
import org.main.scla_dep_mgmt_change.graph.expressions_sg.config.Context
import org.apache.spark._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import org.apache.spark.sql.expressions._
import java.time._
object REF_DONOT_CHANGE {
  def apply(context: Context, in: DataFrame): DataFrame = in.select(col("customer_id"), col("first_name"), col("last_name"), col("phone"), col("email"), col("country_code"), col("account_open_date"), col("account_flags"), c_expressions(context).as("c_expressions"))
  def c_expressions(context: Context) = {
    val spark = context.spark
    val Config = context.config
    col("customer_id").cast(IntegerType) > lit(5) and col("customer_id").cast(IntegerType) =!= lit(0) or col("first_name").like("%A%") or lit(1).bitwiseAND(lit(1)) === lit(1) or (lit(2).bitwiseOR(lit(2)) === lit(2) and lit(10) * col("customer_id").cast(IntegerType) === lit(20) and (col("last_name") =!= col("first_name") and col("customer_id").cast(IntegerType) =!= lit(10)) and (col("customer_id").cast(IntegerType) >= lit(10) and col("customer_id").cast(IntegerType) <= lit(20) and array(lit(10), lit(20), lit(30)).getItem(2) === lit(30) and map(lit(1), lit("Hello"), lit(2), lit("World")).getItem(1) === lit("Hello")) and (lit(10).bitwiseXOR(lit(20)) === lit(50) and map(lit("three"), lit(3)).getField("four") === lit(null) and expr("named_struct('a', 5, 'b', 'Spark')").getField("a") === lit(5) and (lit(1) === lit(2) and lit(1) === lit(2) and (lit(1) >= lit(2) and lit(1) <= lit(2) and lit(1) =!= lit(3) or lit(2) > lit(4) or lit(4) < lit(5)) and exists(array(lit(1), lit(null), lit(3)), x => x % lit(2) === lit(0)))) or expr("ilike('Spark', '_PARK')") or (expr("named_struct('a', 1, 'b', 2)").isin(expr("named_struct('a', 1, 'b', 1)"), expr("named_struct('a', 1, 'b', 3)")) and !(lit(1) <=> lit(5)) and lit("invalid") <=> lit(false) and (lit(1).isNull and !(lit("t") <=> lit(true)) and lit(1) <=> lit("1")) and (lit(1) =!= col("customer_id").cast(IntegerType) and lit(10) - lit(2) + lit(10) === lit(8) and !lit(true) and (lit(false) or lit(true) and lit(2) % lit(0) === lit(0))) and (concat(lit("Spark"), lit("SQL")) === lit("SparkSQL") and lit("%SystemDrive%\\Users\\John").like("%SystemDrive%\\\\Users%") and lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*") and (expr("regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')") and lit(2L) / lit(2L) === lit(10) and bitwiseNOT(lit(0)) === lit(-1)) and (base64(expr("aes_encrypt('Spark', 'abcdefghijklmnop')")) === lit(null) and expr("aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop')").cast(StringType) === lit(null) and ascii(lit("234")) === lit(234) and (base64(lit("Spark SQL")) === lit(null) and bin(lit(13)) === lit(null)))) and (expr("binary('Spark SQL')") === lit(null) and expr("btrim('abcaabaSparkSQLabcaaba', 'abc')") =!= lit(null) and expr("char(65)") =!= lit(null) and (expr("char_length('Spark SQL ')") === lit(10) and expr("character_length('Spark SQL ')") === lit(10) and concat(col("customer_id"), lit("hello")) =!= lit(null)) and (concat_ws(",", lit("Spark"), array(lit("S"), lit("Q"), lit(null), lit("L")), lit(null)) =!= lit(null) and lit("SparkSQL").contains(lit("Spork")) and crc32(lit("Spark")) > lit(0) and (expr("chr(65)") =!= lit(null) and lit(3).bitwiseXOR(lit(5)) === lit(6))) and (hex(encode(lit("Spark SQL"), "US-ASCII")) =!= lit(null) and lit("SparkSQL").endsWith(lit("SQL")) and expr("find_in_set('ab', 'abc,b,ab,c,def')") === lit(2) and (format_number(lit(12332.123456d), 4) === lit(2) and expr("format_number(12332.123456D, '#.###')") === lit(10) and format_string("Hello World %d %s", lit(100), lit("days")) =!= lit(null)) and (hex(lit("Spark SQL")) =!= lit(null) and lit("%SystemDrive%\\Users\\John").like("%SystemDrive%\\\\Users%") and initcap(lit("sPark sql")) =!= lit(null) and (instr(lit("SparkSQL"), "R") === lit(2) and expr("lcase('LowerCase')") =!= lit(null))))) and (expr("left('Spark SQL', 3)") =!= lit(null) and length(lit("Spark SQL ")) > lit(20) and levenshtein(lit("kitten"), lit("sitting")) > lit(10) and (locate("bar", lit("abcbarbar")) > lit(2) and locate("bar", lit("abcbarbar"), 5) > lit(2) and lower(lit("LowerCase")) =!= lit(null)) and (lpad(lit("hi"), 1, "??") =!= lit(null) and hex(expr("lpad(X'1020', 5, X'05')")) =!= lit(null) and concat(concat(lit("+"), ltrim(lit("abc"), "acbabSparkSQL   ")), lit("+")) =!= lit(null) and (md5(lit("Spark")) =!= lit(null) and expr("octet_length('Spark SQL')") =!= lit(null))) and (expr("parse_url('http://spark.apache.org/path?query=1', 'HOST')") =!= lit(null) and expr("position('bar', 'abcbarbar')") > lit(10) and expr("position('bar', 'abcbarbar', 5)") > lit(5) and (expr("printf('Hello World %d %s', 100, 'days')") =!= lit(null) and lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*") and lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*")) and (expr("regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')") and regexp_extract(lit("100-200"), "(\\d+)-(\\d+)", 1) > lit(10) and expr("regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1)") =!= lit(null) and (regexp_replace(lit("100-200"), "(\\d+)", "num") =!= lit(null) and repeat(lit("123"), 2) =!= lit(null)))) and (expr("replace('ABCabc', 'abc', 'DEF')") =!= lit(null) and reverse(lit("Spark SQL")) =!= lit(null) and expr("right('Spark SQL', 3)") =!= lit(null) and (rpad(lit("hi"), 5, "ab") =!= lit(null) and hex(expr("rpad(X'1020', 5, X'05')")) =!= lit(null) and rtrim(lit("ab"), "SparkSQLabcaaba") =!= lit(null)) and (expr("sentences('Hi there! Good morning.', 'en', 'US')") =!= lit(null) and expr("sha('Spark')") =!= lit(null) and sha1(lit("Spark")) =!= lit(null) and (sha2(lit("Spark"), 256) =!= lit(null) and soundex(lit("Miller")) =!= lit(null))) and (concat(lit("1"), expr("space(2)"), lit("1")) =!= lit(null) and concat(concat(lit("->"), expr("split_part('Hello,world,!', ',', 1)")), lit("<-")) =!= lit(null) and concat(concat(lit("->"), expr("split_part('', ',', 1)")), lit("<-")) =!= lit(null) and (concat(concat(lit("->"), expr("split_part('Hello,World,!', ',', 0)")), lit("<-")) =!= lit(null) and lit("SparkSQL").startsWith(lit("Spark")) and lit(null).startsWith(lit("Spark"))) and (substring(lit("Spark SQL"), 5, 1) =!= lit(null) and substring_index(lit("www.apache.org"), ".", 2) =!= lit(null) and expr("to_binary('537061726B')").cast(StringType) =!= lit(null) and (expr("to_binary('537061726B', 'hex')").cast(StringType) =!= lit(null) and expr("try_to_binary('U3Bhxcms=', 'base64')").cast(StringType) =!= lit(null)))))) and (translate(lit("AaBbCc"), "abc", "123") =!= lit(null) and expr("try_to_binary('U3Bhxcms=', 'base64')").cast(StringType) =!= lit(null) and expr("ucase('SparkSql')") =!= lit(null) and (unbase64(lit("U3BhcmsgU1FM")).cast(StringType) =!= lit(null) and decode(unhex(lit("537061726B2053514C")), "UTF-8") =!= lit(null) and upper(lit("SparkSql")) =!= lit(null)) and (lit(10) / lit(2) === lit(5) and lit(3).bitwiseOR(lit(5)) === lit(2) and lit(10) - lit(2) + lit(2) === lit(4) and (lit(2) % lit(1.8d) === lit(2) and lit(3).bitwiseXOR(lit(5)) === lit(3))) and (lit(3).bitwiseAND(lit(5)) === lit(2) and lit(3) * lit(2) === lit(2) and abs(lit(-1)) === lit(1) and (acos(lit(1)) === lit(1) and expr("acosh(1)") === lit(1) and asin(lit(0)) === lit(1)) and (expr("asinh(0)") === lit(1) and atan(lit(0)) === lit(1) and atan2(lit(0), 0.0d) === lit(1) and (expr("atanh(0)") === lit(1) and expr("bigint(current_timestamp)") > lit(1)))) and (expr("bit_count(-1)") > lit(1) and expr("bit_get(23Y, 1)") === lit(1) and bround(lit(13.5d), -1) === lit(1) and (round(lit(13.5d), -1) === lit(1) and cbrt(lit(27.0d)) === lit(3) and expr("ceil(3345.1D, -2)") === lit(1)) and (expr("ceiling(5.4BD)") === lit(6) and expr("ceiling(3345.1BD, -2)") === lit(1) and conv(lit("100"), 2, 10) === lit(4) and (conv(lit("FFFFFFFFFFFFFFFF"), 16, 10) === lit(1) and cos(expr("pi()")) === lit(-1))) and (cosh(lit(0)) === lit(1) and expr("cot(1)") === lit(1) and csc(expr("pi()") / lit(2)) === lit(2) and (expr("decimal('5.2')") === lit(5) and degrees(lit(3.141592653589793d)) === lit(10) and expr("double('5.2')") === lit(4)) and (expr("e()") === lit(2) and exp(lit(1)) === lit(2) and expm1(lit(0)) === lit(1) and (factorial(lit(2)) === lit(2) and expr("float('5.2')") === lit(5))))) and (floor(lit(-0.1d)) === lit(-1) and expr("floor(3345.1D, -2)") === lit(20) and expr("getbit(23Y, 0)") === lit(1) and (hypot(3.0d, lit(4)) === lit(5) and expr("int(-5.6BD)") === lit(5) and isnan(lit("NaN").cast(DoubleType))) and (expr("ln(1)") === lit(1) and log(10.0d, lit(100)) === lit(2) and log1p(lit(0)) === lit(1) and (log2(lit(2)) === lit(1) and log10(lit(10)) === lit(1))) and (nanvl(lit("NaN").cast(DoubleType), lit(123)) === lit(2) and expr("negative(1)") === lit(-1) and pmod(lit(-10), lit(3)) === lit(2) and (expr("positive(-1)") === lit(-1) and pow(lit(2), lit(3)) * expr("power(2, 3)") === lit(8) and radians(lit(180)) === lit(10)) and (expr("rand(0)") * expr("random(0)") === lit(1) and expr("randn(0)") === lit(1) and rint(lit(12.3456d)) === lit(1) and (round(lit(2.5d), 0) === lit(3) and sec(expr("pi()")) === lit(-1)))) and (sin(lit(0)) === lit(0) and shiftLeft(lit(2), 1) === lit(2) and shiftRight(lit(4), 1) === lit(2) and (shiftRightUnsigned(lit(4), 1) === lit(2) and expr("sign(40)") === lit(1) and signum(lit(40)) === lit(1)) and (sinh(lit(0)) === lit(1) and expr("smallint(-5.6BD)") === lit(5) and sqrt(lit(4)) === lit(2) and (tan(lit(0)) === lit(1) and tanh(lit(0)) === lit(1))) and (expr("tinyint('12')") * expr("tinyint(5.4BD)") === lit(1) and expr("to_number('$345', 'S$999,099.99')") + expr("to_number('<1234>', '999999PR')") === lit(2) and expr("try_add(1, 2)") === lit(3) and (expr("try_divide(3, 2)") === lit(3) and expr("try_subtract(1, 2)") === lit(2) and expr("try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") =!= lit(null)) and (expr("try_subtract(-128Y, 1Y)") =!= lit(null) and expr("try_to_number('$345', 'S$999,099.99')") / expr("try_to_number('<1234>', '999999PR')") === lit(1) and expr("width_bucket(5.3BD, 0.2BD, 10.6BD, 5)") + expr("width_bucket(-0.9BD, 5.2BD, 0.5BD, 2)") === lit(3) and (array(lit(10), lit(20), lit(30)) =!= lit(null) and aggregate(array(lit(1), lit(2), lit(3)), lit(0), (acc, x) => acc + x, acc => acc * lit(10)) === lit(1))))))) and (array_contains(array(lit(1), lit(2), lit(3)), lit(2)) and array_distinct(array(lit(1), lit(2), lit(3), lit(null), lit(3))) =!= lit(null) and array_except(array(lit(1), lit(2), lit(2), lit(3)), array(lit(1), lit(1), lit(3), lit(5))) =!= lit(null) and (array_intersect(array(lit(1), lit(2), lit(3)), array(lit(1), lit(3), lit(3), lit(5))) =!= lit(null) and array_join(array(lit("hello"), lit("world")), ",") =!= lit(null) and array_join(array(lit("hello"), lit(null), lit("world")), ",", "*") === lit(null)) and (array_max(array(lit(1), lit(20), lit(null), lit(3))) > lit(10) and array_min(array(lit(1), lit(20), lit(null), lit(3))) === lit(1) and array_position(array(lit(3), lit(2), lit(1), lit(4), lit(1)), 1) === lit(2) and (array_remove(array(lit(1), lit(2), lit(3), lit(null), lit(3), lit(2)), 3) =!= lit(null) and array_repeat(lit("123"), lit(2)) =!= lit(null))) and (expr("array_size(array(1, NULL, 3, NULL))") === lit(2) and expr("array_sort(array('bc', 'ab', 'dc'), (left, right) -> CASE WHEN (isnull(left) AND isnull(right)) THEN 0 WHEN isnull(left) THEN -1 WHEN isnull(right) THEN 1 WHEN (left < right) THEN 1 WHEN (left > right) THEN -1 ELSE 0 END)") =!= lit(null) and array_union(array(lit(1), lit(2), lit(2), lit(3)), array(lit(1), lit(3), lit(5))) =!= lit(null) and (arrays_overlap(array(lit(1), lit(2), lit(null), lit(3)), array(lit(null), lit(4), lit(5))) === lit(null) and arrays_zip(array(lit(1), lit(2)), array(lit("shoe"), lit("string"), lit("budget"))) === lit(null) and expr("cardinality(array('b', 'd', 'c', 'a'))") === lit(2)) and (concat(array(lit(1), lit(2), lit(3)), array(lit(4), lit(5)), array(lit(6))) =!= lit(null) and element_at(map(lit(1), lit("a"), lit(2), lit("b")), 2) === lit(null) and exists(array(lit(1), lit(2), lit(3)), x => x % lit(2) === lit(0)) and (exists(array(lit(0), lit(null), lit(2), lit(3), lit(null)), x => x.isNull) and filter(array(lit(1), lit(2), lit(3)), x => x % lit(2) === lit(1)) =!= lit(null)))) and (flatten(array(array(lit(1), lit(2)), array(lit(3), lit(4)))) =!= lit(null) and forall(array(lit(1), lit(2), lit(3)), x => x % lit(2) === lit(0)) === lit(null) and reverse(array(lit(2), lit(1), lit(4), lit(3))) =!= lit(null) and (sequence(lit(5), lit(1)) =!= lit(null) and expr("cardinality(array('b', 'd', 'c', 'a'))") === lit(10) and slice(array(lit(1), lit(2), lit(3), lit(4)), 2, 2) =!= lit(null)) and (sort_array(array(lit("b"), lit("d"), lit(null), lit("c"), lit("a")), true) =!= lit(null) and transform(array(lit(1), lit(2), lit(3)), x => x + lit(1)) =!= lit(null) and expr("try_element_at(array(1, 2, 3), 2)") === lit(2) and (zip_with(array(lit("a"), lit("b"), lit("c")), array(lit("d"), lit("e"), lit("f")), (x, y) => concat(x, y)) =!= lit(null) and map(lit(1), lit("Hello"), lit(2), lit("World")).getItem(1) =!= lit(null))) and (expr("cardinality(map('a', 1, 'b', 2))") === lit(2) and element_at(map(lit(1), lit("a"), lit(2), lit("b")), 3) === lit(null) and map(lit(1.0d), lit("2"), lit(3.0d), lit("4")).isNotNull and (map_concat(map(lit(1), lit("a"), lit(2), lit("b")), map(lit(3), lit("c"))).isNotNull and map_contains_key(map(lit(1), lit("a"), lit(2), lit("b")), lit(2)) and map_entries(map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull) and (map_filter(map(lit(1), lit(0), lit(2), lit(2), lit(3), lit(-1)), (k, v) => k > v).isNotNull and map_from_arrays(array(lit(1.0d), lit(3.0d)), array(lit("2"), lit("4"))).isNotNull and map_from_entries(array(struct(lit(1).as("col1"), lit("a").as("col2")), struct(lit(2).as("col1"), lit("b").as("col2")))).isNotNull and (map_keys(map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull and map_values(map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull)))) and (map_zip_with(map(lit(1), lit("a"), lit(2), lit("b")), map(lit(1), lit("x"), lit(2), lit("y")), (k, v1, v2) => concat(v1, v2)).isNotNull and expr("cardinality(map('a', 1, 'b', 2))") === lit(2) and expr("str_to_map('a:1,b:2,c:3', ',', ':')").isNotNull and (transform_keys(map_from_arrays(array(lit(1), lit(2), lit(3)), array(lit(1), lit(2), lit(3))), (k, v) => k + lit(1)).isNotNull and transform_values(map_from_arrays(array(lit(1), lit(2), lit(3)), array(lit(1), lit(2), lit(3))), (k, v) => k + v).isNotNull and expr("try_element_at(map(1, 'a', 2, 'b'), 2)").isNotNull) and (add_months(lit("2016-08-31"), -6) =!= lit(null) and current_date() =!= lit(null) and current_timestamp() =!= lit(null) and (expr("current_timezone()") =!= lit(null) and expr("date('2021-03-21')") =!= lit(null))) and (date_add(lit("2016-07-30"), 1) =!= lit(null) and date_format(lit("2016-04-08"), "y") === lit(2016) and expr("date_from_unix_date(1)") =!= lit(null) and (date_sub(lit("2016-07-30"), 1) =!= lit(null) and date_trunc("YEAR", lit("2015-03-05T09:32:05.359")) =!= lit(null) and datediff(lit("2009-07-31"), lit("2009-07-30")) === lit(1)) and (expr("day('2009-07-30')") === lit(30) and dayofmonth(lit("2009-07-30")) === lit(30) and dayofweek(lit("2009-07-30")) === lit(5) and (dayofyear(lit("2016-04-09")) === lit(100) and expr("extract('week', TIMESTAMP '2019-08-12 01:00:00.123456')") === lit(33)))) and (from_unixtime(lit(0), "yyyy-MM-dd HH:mm:ss") =!= lit(null) and from_utc_timestamp(lit("2017-07-14 02:40:00.0"), "GMT+1") =!= lit(null) and from_utc_timestamp(lit("2016-08-31"), "Asia/Seoul") =!= lit(null) and (hour(lit("2009-07-30 12:58:59")) === lit(10) and last_day(lit("2009-01-12")).isNotNull and make_date(lit(2013), lit(7), lit(15)).isNotNull) and (expr("make_dt_interval(0, 0, 1, -0.1BD)").isNotNull and expr("make_ym_interval(100, 5)").isNotNull and minute(lit("2009-07-30 12:58:59")) === lit(58) and (month(lit("2016-07-30")) === lit(7) and months_between(lit("1997-02-28 10:30:00"), lit("1996-10-30")) === lit(3))) and (months_between(lit("1997-02-28 10:30:00"), lit("1996-10-30"), false) === lit(2) and next_day(lit("2015-01-14"), "TU") =!= lit(null) and quarter(lit("2016-08-31")) === lit(3) and (second(lit("2009-07-30 12:58:59")) === lit(59) and expr("sign(INTERVAL '-1' DAY)") === lit(-1) and signum(lit(Duration.ofNanos(-86400000000000L))) === lit(-1)) and (expr("timestamp(123)") =!= lit(null) and expr("timestamp('2020-04-30 12:25:13.45')") =!= lit(null) and expr("timestamp_micros(1230219000123123L)") =!= lit(null) and (expr("timestamp_millis(1230219000123L)") =!= lit(null) and timestamp_seconds(lit(1230219000)) =!= lit(null)))))) and (to_date(lit("2016-12-31"), "yyyy-MM-dd") =!= lit(null) and to_timestamp(lit("2016-12-31"), "yyyy-MM-dd") =!= lit(null) and to_utc_timestamp(lit("2017-07-14 02:40:00.0"), "GMT+1") =!= lit(null) and (trunc(lit("2015-10-27"), "YEAR") =!= lit(null) and trunc(lit("2019-08-04"), "quarter") =!= lit(null) and expr("try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") =!= lit(null)) and (expr("try_add(DATE '2021-03-31', INTERVAL '1' MONTH)") =!= lit(null) and expr("try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3)") =!= lit(null) and expr("try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH)") =!= lit(null) and (expr("try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") =!= lit(null) and expr("unix_date(DATE('1970-01-02'))") === lit(1))) and (expr("unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'))") === lit(1) and expr("unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'))") === lit(1) and expr("unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'))") === lit(1) and (unix_timestamp(lit("2016-04-08"), "yyyy-MM-dd") === lit(1) and expr("weekday(DATE '2009-07-30')") === lit(1) and expr("extract('DAYOFWEEK_ISO', DATE '2009-07-30')") === lit(4)) and (weekofyear(lit("2008-02-20")) === lit(8) and year(lit("2016-07-30")) === lit(2016) and array(lit(1), lit(2), lit(3)) =!= lit(null) and (expr("bigint('5')") === lit(5) and expr("binary('Spark SQL')") =!= lit(null)))) and (expr("boolean(1)") and lit(5.6d).cast(DecimalType(2, 0)) =!= lit(null) and expr("date('2021-03-21')") =!= lit(null) and (expr("decimal('5.2')") === lit(5) and expr("double('5.2')") / lit(2) === lit(5) and expr("float('5.2')") / lit(2) === lit(2)) and (expr("int('5')") === lit(5) and make_date(lit(2013), lit(7), lit(15)) =!= lit(null) and expr("make_dt_interval(100, 13)") =!= lit(null) and (expr("make_ym_interval(100, 5)") === lit(null) and map(lit(1.0d), lit("2"), lit(3.0d), lit("4")).isNotNull)) and (expr("named_struct('a', 1, 'b', 2, 'c', 3)").isNotNull and expr("smallint('5')") === lit(5) and struct(lit(1).as("col1"), lit(2).as("col2"), lit(3).as("col3")).isNotNull and (expr("tinyint('12')") === lit(12) and expr("timestamp('2020-04-30 12:25:13.45')") =!= lit(null) and to_date(lit("2016-12-31"), "yyyy-MM-dd") =!= lit(null)) and (expr("to_number('-$12,345.67', 'S$999,099.99')") > lit(10) and to_timestamp(lit("2016-12-31 00:12:00")) =!= lit(null) and expr("TRY_CAST('10' AS INT)") === lit(10) and (expr("try_to_number('-$12,345.67', 'S$999,099.99')") =!= lit(null) and expr("from_csv('1, 0.8', 'a INT, b DOUBLE')") =!= lit(null))))) and (schema_of_csv("1,abc") =!= lit(null) and expr("json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')") === lit(5) and expr("json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')") =!= lit(null) and (expr("schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true'))") =!= lit(null) and to_json(expr("named_struct('a', 1, 'b', 2)")) =!= lit(null) and to_json(map(expr("named_struct('a', 1)"), expr("named_struct('b', 2)"))) =!= lit(null)) and (to_json(array(map(lit("a"), lit(1)))) =!= lit(null) and expr("xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()')") =!= lit(null) and expr("xpath_boolean('<a><b>1</b></a>', 'a/b')") and (expr("xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") =!= lit(null) and expr("xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") =!= lit(null))) and (expr("xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") === lit(2) and expr("xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") === lit(3) and expr("xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") === lit(2) and (expr("xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") === lit(2) and expr("xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c')") =!= lit(null) and expr("assert_true((0 < 1))") === lit(null)) and (when(lit(1) > lit(0), lit(1)).when(lit(2) > lit(0), lit(2.0d)).otherwise(lit(1.2d)) === lit(1) and when(lit(3) === lit(1), lit("A")).when(lit(3) === lit(2), lit("B")).when(lit(3) === lit(3), lit("C")) =!= lit(null) and coalesce(lit(2), lit(5) / lit(0)) === lit(2) and (expr("current_catalog()") =!= lit(null) and expr("current_database()") =!= lit(null)))) and (expr("current_user()") =!= lit(null) and expr("decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks')") =!= lit(null) and expr("elt(1, 'scala', 'java')") =!= lit(null) and (greatest(lit(10), lit(9), lit(2), lit(4), lit(3)) === lit(10) and hash(lit("Spark"), array(lit(123)), lit(2)) =!= lit(null) and expr("java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2')") =!= lit(null)) and (expr("if((1 < 2), 'a', 'b')") =!= lit(null) and expr("ifnull(NULL, array('2'))") =!= lit(null) and expr("input_file_block_length()") === lit(-1) and (expr("input_file_block_start()") === lit(-1) and input_file_name() =!= lit(null))) and (lit(1).isNull and lit(1).isNotNull and least(lit(10), lit(9), lit(2), lit(4), lit(3)) === lit(2) and (monotonically_increasing_id() > lit(10) and expr("nullif(2, 2)") === lit(null) and expr("nvl(NULL, 2)") === lit(2)) and (expr("nvl2(NULL, 2, 1)") === lit(1) and expr("reflect('java.util.UUID', 'randomUUID')") =!= lit(null) and expr("typeof(1)") =!= lit(null) and (expr("uuid()") =!= lit(null) and xxhash64(lit("Spark"), array(lit(123)), lit(2)) =!= lit(null))))))))))
  }
}